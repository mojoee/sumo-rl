Failure # 1 (occurred at 2024-01-17_01-18-20)
[36mray::PPO.train()[39m (pid=74367, ip=140.118.201.156, actor_id=e7d50a0c9baa8ec661bc94ba01000000, repr=PPO)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/tune/trainable/trainable.py", line 342, in train
    raise skipped from exception_cause(skipped)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/tune/trainable/trainable.py", line 339, in train
    result = self.step()
             ^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/algorithms/algorithm.py", line 852, in step
    results, train_iter_ctx = self._run_one_training_iteration()
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/algorithms/algorithm.py", line 3042, in _run_one_training_iteration
    results = self.training_step()
              ^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/algorithms/ppo/ppo.py", line 407, in training_step
    train_batch = synchronous_parallel_sample(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/execution/rollout_ops.py", line 83, in synchronous_parallel_sample
    sample_batches = worker_set.foreach_worker(
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/worker_set.py", line 705, in foreach_worker
    handle_remote_call_result_errors(remote_results, self._ignore_worker_failures)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/worker_set.py", line 78, in handle_remote_call_result_errors
    raise r.get()
ray.exceptions.RayTaskError(ValueError): [36mray::RolloutWorker.apply()[39m (pid=74467, ip=140.118.201.156, actor_id=bb6aa8c1623d4067fb439a2c01000000, repr=<ray.rllib.evaluation.rollout_worker.RolloutWorker object at 0x7f6a6291add0>)
ValueError: The two structures don't have the same nested structure.

First structure: type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

Second structure: type=OrderedDict str=OrderedDict([('0', array([0.98077786, 0.7477671 , 0.5707566 , 0.2445814 , 0.7164126 ,
       0.6180266 , 0.8913203 , 0.6449793 , 0.83889365, 0.7852094 ,
       0.32717615], dtype=float32)), ('1', array([0.10744921, 0.3623247 , 0.10096697, 0.28456908, 0.1932891 ,
       0.2963741 , 0.6747554 , 0.678646  , 0.47750825, 0.2824025 ,
       0.18513714], dtype=float32)), ('10', array([0.29832458, 0.7819438 , 0.6291524 , 0.79278105, 0.2913166 ,
       0.32831016, 0.36114573, 0.2575795 , 0.08929973, 0.61146903,
       0.81097186], dtype=float32)), ('11', array([0.86557126, 0.8480889 , 0.909271  , 0.3560276 , 0.10239374,
       0.03393908, 0.00874868, 0.5241484 , 0.6472948 , 0.7558286 ,
       0.7798671 ], dtype=float32)), ('12', array([0.3914651 , 0.4375108 , 0.42481032, 0.0349206 , 0.0227442 ,
       0.12146129, 0.22801842, 0.29325935, 0.33251765, 0.5366212 ,
       0.86741036], dtype=float32)), ('13', array([0.08269866, 0.48027125, 0.53658545, 0.27343613, 0.9397872 ,
       0.251871  , 0.4846615 , 0.0045297 , 0.6211361 , 0.05255011,
       0.47426376], dtype=float32)), ('14', array([0.57084376, 0.22727317, 0.6030675 , 0.42375147, 0.72367847,
       0.07819103, 0.25645187, 0.32690716, 0.18483834, 0.4961298 ,
       0.7383289 ], dtype=float32)), ('15', array([0.13480921, 0.95359313, 0.10577884, 0.47794107, 0.34434927,
       0.50576174, 0.35767594, 0.10803773, 0.8889604 , 0.03495203,
       0.8374493 ], dtype=float32)), ('2', array([0.40158978, 0.8338524 , 0.56878203, 0.76320165, 0.21775602,
       0.14535336, 0.84589577, 0.4853302 , 0.11567364, 0.24558246,
       0.38833147], dtype=float32)), ('3', array([0.56846875, 0.26245758, 0.6110456 , 0.36905417, 0.46669832,
       0.48236263, 0.77895606, 0.4890905 , 0.18449724, 0.91403776,
       0.74859154], dtype=float32)), ('4', array([0.40965343, 0.6094546 , 0.30805027, 0.49556342, 0.29737088,
       0.01125154, 0.93747425, 0.4728819 , 0.17683484, 0.9899416 ,
       0.01059846], dtype=float32)), ('5', array([0.17539045, 0.81452924, 0.7384341 , 0.6876354 , 0.88122284,
       0.74508053, 0.68012404, 0.70955133, 0.5109053 , 0.0245832 ,
       0.7353929 ], dtype=float32)), ('6', array([0.41586706, 0.29634142, 0.23433885, 0.8629283 , 0.7256909 ,
       0.48249936, 0.7667998 , 0.17794135, 0.38730082, 0.29084808,
       0.23340479], dtype=float32)), ('7', array([0.95634043, 0.78424704, 0.540109  , 0.29784212, 0.63727766,
       0.8045963 , 0.02409288, 0.33945456, 0.25725913, 0.69969004,
       0.18022329], dtype=float32)), ('8', array([0.7900237 , 0.06174074, 0.13764651, 0.4618499 , 0.01222223,
       0.13591504, 0.575687  , 0.12444179, 0.78087664, 0.3608624 ,
       0.87343377], dtype=float32)), ('9', array([0.0446374 , 0.77553713, 0.4179491 , 0.45630944, 0.18602052,
       0.6026995 , 0.62943494, 0.5296878 , 0.32416618, 0.5679324 ,
       0.71020573], dtype=float32))])

More specifically: Substructure "type=OrderedDict str=OrderedDict([('0', array([0.98077786, 0.7477671 , 0.5707566 , 0.2445814 , 0.7164126 ,
       0.6180266 , 0.8913203 , 0.6449793 , 0.83889365, 0.7852094 ,
       0.32717615], dtype=float32)), ('1', array([0.10744921, 0.3623247 , 0.10096697, 0.28456908, 0.1932891 ,
       0.2963741 , 0.6747554 , 0.678646  , 0.47750825, 0.2824025 ,
       0.18513714], dtype=float32)), ('10', array([0.29832458, 0.7819438 , 0.6291524 , 0.79278105, 0.2913166 ,
       0.32831016, 0.36114573, 0.2575795 , 0.08929973, 0.61146903,
       0.81097186], dtype=float32)), ('11', array([0.86557126, 0.8480889 , 0.909271  , 0.3560276 , 0.10239374,
       0.03393908, 0.00874868, 0.5241484 , 0.6472948 , 0.7558286 ,
       0.7798671 ], dtype=float32)), ('12', array([0.3914651 , 0.4375108 , 0.42481032, 0.0349206 , 0.0227442 ,
       0.12146129, 0.22801842, 0.29325935, 0.33251765, 0.5366212 ,
       0.86741036], dtype=float32)), ('13', array([0.08269866, 0.48027125, 0.53658545, 0.27343613, 0.9397872 ,
       0.251871  , 0.4846615 , 0.0045297 , 0.6211361 , 0.05255011,
       0.47426376], dtype=float32)), ('14', array([0.57084376, 0.22727317, 0.6030675 , 0.42375147, 0.72367847,
       0.07819103, 0.25645187, 0.32690716, 0.18483834, 0.4961298 ,
       0.7383289 ], dtype=float32)), ('15', array([0.13480921, 0.95359313, 0.10577884, 0.47794107, 0.34434927,
       0.50576174, 0.35767594, 0.10803773, 0.8889604 , 0.03495203,
       0.8374493 ], dtype=float32)), ('2', array([0.40158978, 0.8338524 , 0.56878203, 0.76320165, 0.21775602,
       0.14535336, 0.84589577, 0.4853302 , 0.11567364, 0.24558246,
       0.38833147], dtype=float32)), ('3', array([0.56846875, 0.26245758, 0.6110456 , 0.36905417, 0.46669832,
       0.48236263, 0.77895606, 0.4890905 , 0.18449724, 0.91403776,
       0.74859154], dtype=float32)), ('4', array([0.40965343, 0.6094546 , 0.30805027, 0.49556342, 0.29737088,
       0.01125154, 0.93747425, 0.4728819 , 0.17683484, 0.9899416 ,
       0.01059846], dtype=float32)), ('5', array([0.17539045, 0.81452924, 0.7384341 , 0.6876354 , 0.88122284,
       0.74508053, 0.68012404, 0.70955133, 0.5109053 , 0.0245832 ,
       0.7353929 ], dtype=float32)), ('6', array([0.41586706, 0.29634142, 0.23433885, 0.8629283 , 0.7256909 ,
       0.48249936, 0.7667998 , 0.17794135, 0.38730082, 0.29084808,
       0.23340479], dtype=float32)), ('7', array([0.95634043, 0.78424704, 0.540109  , 0.29784212, 0.63727766,
       0.8045963 , 0.02409288, 0.33945456, 0.25725913, 0.69969004,
       0.18022329], dtype=float32)), ('8', array([0.7900237 , 0.06174074, 0.13764651, 0.4618499 , 0.01222223,
       0.13591504, 0.575687  , 0.12444179, 0.78087664, 0.3608624 ,
       0.87343377], dtype=float32)), ('9', array([0.0446374 , 0.77553713, 0.4179491 , 0.45630944, 0.18602052,
       0.6026995 , 0.62943494, 0.5296878 , 0.32416618, 0.5679324 ,
       0.71020573], dtype=float32))])" is a sequence, while substructure "type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]" is not

During handling of the above exception, another exception occurred:

[36mray::RolloutWorker.apply()[39m (pid=74467, ip=140.118.201.156, actor_id=bb6aa8c1623d4067fb439a2c01000000, repr=<ray.rllib.evaluation.rollout_worker.RolloutWorker object at 0x7f6a6291add0>)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/utils/actor_manager.py", line 189, in apply
    raise e
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/utils/actor_manager.py", line 178, in apply
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/execution/rollout_ops.py", line 84, in <lambda>
    lambda w: w.sample(), local_worker=False, healthy_only=True
              ^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/rollout_worker.py", line 694, in sample
    batches = [self.input_reader.next()]
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/sampler.py", line 91, in next
    batches = [self.get_data()]
               ^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/sampler.py", line 276, in get_data
    item = next(self._env_runner)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/env_runner_v2.py", line 344, in run
    outputs = self.step()
              ^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/env_runner_v2.py", line 370, in step
    active_envs, to_eval, outputs = self._process_observations(
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/env_runner_v2.py", line 637, in _process_observations
    processed = policy.agent_connectors(acd_list)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/agent/pipeline.py", line 41, in __call__
    ret = c(ret)
          ^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/connector.py", line 265, in __call__
    return [self.transform(d) for d in acd_list]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/connector.py", line 265, in <listcomp>
    return [self.transform(d) for d in acd_list]
            ^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/agent/obs_preproc.py", line 58, in transform
    d[SampleBatch.NEXT_OBS] = self._preprocessor.transform(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/models/preprocessors.py", line 329, in transform
    self.check_shape(observation)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/models/preprocessors.py", line 69, in check_shape
    observation = convert_element_to_space_type(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/utils/spaces/space_utils.py", line 472, in convert_element_to_space_type
    return tree.map_structure(map_, element, sampled_element, check_types=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/tree/__init__.py", line 433, in map_structure
    assert_same_structure(structures[0], other, check_types=check_types)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/tree/__init__.py", line 288, in assert_same_structure
    raise type(e)("%s\n"
ValueError: The two structures don't have the same nested structure.

First structure: type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

Second structure: type=OrderedDict str=OrderedDict([('0', array([0.98077786, 0.7477671 , 0.5707566 , 0.2445814 , 0.7164126 ,
       0.6180266 , 0.8913203 , 0.6449793 , 0.83889365, 0.7852094 ,
       0.32717615], dtype=float32)), ('1', array([0.10744921, 0.3623247 , 0.10096697, 0.28456908, 0.1932891 ,
       0.2963741 , 0.6747554 , 0.678646  , 0.47750825, 0.2824025 ,
       0.18513714], dtype=float32)), ('10', array([0.29832458, 0.7819438 , 0.6291524 , 0.79278105, 0.2913166 ,
       0.32831016, 0.36114573, 0.2575795 , 0.08929973, 0.61146903,
       0.81097186], dtype=float32)), ('11', array([0.86557126, 0.8480889 , 0.909271  , 0.3560276 , 0.10239374,
       0.03393908, 0.00874868, 0.5241484 , 0.6472948 , 0.7558286 ,
       0.7798671 ], dtype=float32)), ('12', array([0.3914651 , 0.4375108 , 0.42481032, 0.0349206 , 0.0227442 ,
       0.12146129, 0.22801842, 0.29325935, 0.33251765, 0.5366212 ,
       0.86741036], dtype=float32)), ('13', array([0.08269866, 0.48027125, 0.53658545, 0.27343613, 0.9397872 ,
       0.251871  , 0.4846615 , 0.0045297 , 0.6211361 , 0.05255011,
       0.47426376], dtype=float32)), ('14', array([0.57084376, 0.22727317, 0.6030675 , 0.42375147, 0.72367847,
       0.07819103, 0.25645187, 0.32690716, 0.18483834, 0.4961298 ,
       0.7383289 ], dtype=float32)), ('15', array([0.13480921, 0.95359313, 0.10577884, 0.47794107, 0.34434927,
       0.50576174, 0.35767594, 0.10803773, 0.8889604 , 0.03495203,
       0.8374493 ], dtype=float32)), ('2', array([0.40158978, 0.8338524 , 0.56878203, 0.76320165, 0.21775602,
       0.14535336, 0.84589577, 0.4853302 , 0.11567364, 0.24558246,
       0.38833147], dtype=float32)), ('3', array([0.56846875, 0.26245758, 0.6110456 , 0.36905417, 0.46669832,
       0.48236263, 0.77895606, 0.4890905 , 0.18449724, 0.91403776,
       0.74859154], dtype=float32)), ('4', array([0.40965343, 0.6094546 , 0.30805027, 0.49556342, 0.29737088,
       0.01125154, 0.93747425, 0.4728819 , 0.17683484, 0.9899416 ,
       0.01059846], dtype=float32)), ('5', array([0.17539045, 0.81452924, 0.7384341 , 0.6876354 , 0.88122284,
       0.74508053, 0.68012404, 0.70955133, 0.5109053 , 0.0245832 ,
       0.7353929 ], dtype=float32)), ('6', array([0.41586706, 0.29634142, 0.23433885, 0.8629283 , 0.7256909 ,
       0.48249936, 0.7667998 , 0.17794135, 0.38730082, 0.29084808,
       0.23340479], dtype=float32)), ('7', array([0.95634043, 0.78424704, 0.540109  , 0.29784212, 0.63727766,
       0.8045963 , 0.02409288, 0.33945456, 0.25725913, 0.69969004,
       0.18022329], dtype=float32)), ('8', array([0.7900237 , 0.06174074, 0.13764651, 0.4618499 , 0.01222223,
       0.13591504, 0.575687  , 0.12444179, 0.78087664, 0.3608624 ,
       0.87343377], dtype=float32)), ('9', array([0.0446374 , 0.77553713, 0.4179491 , 0.45630944, 0.18602052,
       0.6026995 , 0.62943494, 0.5296878 , 0.32416618, 0.5679324 ,
       0.71020573], dtype=float32))])

More specifically: Substructure "type=OrderedDict str=OrderedDict([('0', array([0.98077786, 0.7477671 , 0.5707566 , 0.2445814 , 0.7164126 ,
       0.6180266 , 0.8913203 , 0.6449793 , 0.83889365, 0.7852094 ,
       0.32717615], dtype=float32)), ('1', array([0.10744921, 0.3623247 , 0.10096697, 0.28456908, 0.1932891 ,
       0.2963741 , 0.6747554 , 0.678646  , 0.47750825, 0.2824025 ,
       0.18513714], dtype=float32)), ('10', array([0.29832458, 0.7819438 , 0.6291524 , 0.79278105, 0.2913166 ,
       0.32831016, 0.36114573, 0.2575795 , 0.08929973, 0.61146903,
       0.81097186], dtype=float32)), ('11', array([0.86557126, 0.8480889 , 0.909271  , 0.3560276 , 0.10239374,
       0.03393908, 0.00874868, 0.5241484 , 0.6472948 , 0.7558286 ,
       0.7798671 ], dtype=float32)), ('12', array([0.3914651 , 0.4375108 , 0.42481032, 0.0349206 , 0.0227442 ,
       0.12146129, 0.22801842, 0.29325935, 0.33251765, 0.5366212 ,
       0.86741036], dtype=float32)), ('13', array([0.08269866, 0.48027125, 0.53658545, 0.27343613, 0.9397872 ,
       0.251871  , 0.4846615 , 0.0045297 , 0.6211361 , 0.05255011,
       0.47426376], dtype=float32)), ('14', array([0.57084376, 0.22727317, 0.6030675 , 0.42375147, 0.72367847,
       0.07819103, 0.25645187, 0.32690716, 0.18483834, 0.4961298 ,
       0.7383289 ], dtype=float32)), ('15', array([0.13480921, 0.95359313, 0.10577884, 0.47794107, 0.34434927,
       0.50576174, 0.35767594, 0.10803773, 0.8889604 , 0.03495203,
       0.8374493 ], dtype=float32)), ('2', array([0.40158978, 0.8338524 , 0.56878203, 0.76320165, 0.21775602,
       0.14535336, 0.84589577, 0.4853302 , 0.11567364, 0.24558246,
       0.38833147], dtype=float32)), ('3', array([0.56846875, 0.26245758, 0.6110456 , 0.36905417, 0.46669832,
       0.48236263, 0.77895606, 0.4890905 , 0.18449724, 0.91403776,
       0.74859154], dtype=float32)), ('4', array([0.40965343, 0.6094546 , 0.30805027, 0.49556342, 0.29737088,
       0.01125154, 0.93747425, 0.4728819 , 0.17683484, 0.9899416 ,
       0.01059846], dtype=float32)), ('5', array([0.17539045, 0.81452924, 0.7384341 , 0.6876354 , 0.88122284,
       0.74508053, 0.68012404, 0.70955133, 0.5109053 , 0.0245832 ,
       0.7353929 ], dtype=float32)), ('6', array([0.41586706, 0.29634142, 0.23433885, 0.8629283 , 0.7256909 ,
       0.48249936, 0.7667998 , 0.17794135, 0.38730082, 0.29084808,
       0.23340479], dtype=float32)), ('7', array([0.95634043, 0.78424704, 0.540109  , 0.29784212, 0.63727766,
       0.8045963 , 0.02409288, 0.33945456, 0.25725913, 0.69969004,
       0.18022329], dtype=float32)), ('8', array([0.7900237 , 0.06174074, 0.13764651, 0.4618499 , 0.01222223,
       0.13591504, 0.575687  , 0.12444179, 0.78087664, 0.3608624 ,
       0.87343377], dtype=float32)), ('9', array([0.0446374 , 0.77553713, 0.4179491 , 0.45630944, 0.18602052,
       0.6026995 , 0.62943494, 0.5296878 , 0.32416618, 0.5679324 ,
       0.71020573], dtype=float32))])" is a sequence, while substructure "type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]" is not
Entire first structure:
.
Entire second structure:
OrderedDict([('0', .), ('1', .), ('10', .), ('11', .), ('12', .), ('13', .), ('14', .), ('15', .), ('2', .), ('3', .), ('4', .), ('5', .), ('6', .), ('7', .), ('8', .), ('9', .)])
