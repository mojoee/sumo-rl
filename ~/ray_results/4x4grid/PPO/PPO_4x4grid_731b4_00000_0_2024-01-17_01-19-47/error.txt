Failure # 1 (occurred at 2024-01-17_01-19-58)
[36mray::PPO.train()[39m (pid=78802, ip=140.118.201.156, actor_id=5a7a687f93df12009ccc157301000000, repr=PPO)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/tune/trainable/trainable.py", line 342, in train
    raise skipped from exception_cause(skipped)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/tune/trainable/trainable.py", line 339, in train
    result = self.step()
             ^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/algorithms/algorithm.py", line 852, in step
    results, train_iter_ctx = self._run_one_training_iteration()
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/algorithms/algorithm.py", line 3042, in _run_one_training_iteration
    results = self.training_step()
              ^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/algorithms/ppo/ppo.py", line 407, in training_step
    train_batch = synchronous_parallel_sample(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/execution/rollout_ops.py", line 83, in synchronous_parallel_sample
    sample_batches = worker_set.foreach_worker(
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/worker_set.py", line 705, in foreach_worker
    handle_remote_call_result_errors(remote_results, self._ignore_worker_failures)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/worker_set.py", line 78, in handle_remote_call_result_errors
    raise r.get()
ray.exceptions.RayTaskError(ValueError): [36mray::RolloutWorker.apply()[39m (pid=78898, ip=140.118.201.156, actor_id=2ee426c029579416157b9ba801000000, repr=<ray.rllib.evaluation.rollout_worker.RolloutWorker object at 0x7f514685ced0>)
ValueError: The two structures don't have the same nested structure.

First structure: type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

Second structure: type=OrderedDict str=OrderedDict([('0', array([0.7284179 , 0.3982534 , 0.25675693, 0.67286175, 0.12987772,
       0.5383716 , 0.79890805, 0.95478386, 0.8700762 , 0.9634496 ,
       0.40837577], dtype=float32)), ('1', array([0.9931105 , 0.72563416, 0.35256886, 0.03866214, 0.9837355 ,
       0.54317373, 0.7502544 , 0.27606624, 0.1158695 , 0.37159982,
       0.21192671], dtype=float32)), ('10', array([0.16444774, 0.7501594 , 0.49828517, 0.374829  , 0.7320385 ,
       0.35971633, 0.06303179, 0.8484459 , 0.11101878, 0.3502011 ,
       0.7994914 ], dtype=float32)), ('11', array([0.37048325, 0.84071827, 0.83286494, 0.7267204 , 0.6238394 ,
       0.55699384, 0.1783012 , 0.34238166, 0.41650406, 0.33483785,
       0.32886627], dtype=float32)), ('12', array([0.01353243, 0.5817296 , 0.31965086, 0.8035826 , 0.8051239 ,
       0.45243406, 0.82535845, 0.13737199, 0.9305921 , 0.06916748,
       0.14225414], dtype=float32)), ('13', array([0.86064786, 0.54453886, 0.24268243, 0.53908193, 0.872055  ,
       0.7478376 , 0.42226467, 0.72198015, 0.95938796, 0.29598278,
       0.87353754], dtype=float32)), ('14', array([0.04739381, 0.75630265, 0.33287704, 0.138322  , 0.50587213,
       0.74883515, 0.57262176, 0.82825434, 0.3875679 , 0.13219483,
       0.9450637 ], dtype=float32)), ('15', array([0.00826951, 0.05851259, 0.6561995 , 0.7385792 , 0.85713834,
       0.92673075, 0.8235313 , 0.32921112, 0.8947141 , 0.6636146 ,
       0.8919714 ], dtype=float32)), ('2', array([0.63130146, 0.04996976, 0.98058486, 0.15754423, 0.47642145,
       0.09624381, 0.48824155, 0.7720303 , 0.65553695, 0.8204826 ,
       0.5275531 ], dtype=float32)), ('3', array([0.6703806 , 0.9697325 , 0.9847291 , 0.54703957, 0.9398831 ,
       0.27219427, 0.5481388 , 0.23533353, 0.33209285, 0.40993708,
       0.5643652 ], dtype=float32)), ('4', array([0.01119027, 0.3509531 , 0.70537275, 0.22913927, 0.6159203 ,
       0.56540316, 0.59363735, 0.74443275, 0.83226067, 0.9468231 ,
       0.8185355 ], dtype=float32)), ('5', array([0.84316516, 0.3559143 , 0.31177044, 0.52407366, 0.46709052,
       0.9328048 , 0.39179146, 0.3622506 , 0.24097352, 0.602627  ,
       0.23160641], dtype=float32)), ('6', array([0.24303944, 0.13899802, 0.5461968 , 0.8253502 , 0.49968332,
       0.68108237, 0.3313101 , 0.04826986, 0.9280715 , 0.09820011,
       0.26902416], dtype=float32)), ('7', array([0.73053604, 0.8798988 , 0.91266835, 0.57133013, 0.10633966,
       0.08646412, 0.7777162 , 0.9946282 , 0.49133363, 0.3967138 ,
       0.41829684], dtype=float32)), ('8', array([0.7544817 , 0.29184872, 0.3078897 , 0.7096112 , 0.85396624,
       0.50468457, 0.85435975, 0.32295007, 0.6048729 , 0.3334717 ,
       0.80915976], dtype=float32)), ('9', array([0.24739833, 0.98737615, 0.58174175, 0.7802174 , 0.28129053,
       0.7962593 , 0.5785189 , 0.20534958, 0.47940564, 0.5425097 ,
       0.80050904], dtype=float32))])

More specifically: Substructure "type=OrderedDict str=OrderedDict([('0', array([0.7284179 , 0.3982534 , 0.25675693, 0.67286175, 0.12987772,
       0.5383716 , 0.79890805, 0.95478386, 0.8700762 , 0.9634496 ,
       0.40837577], dtype=float32)), ('1', array([0.9931105 , 0.72563416, 0.35256886, 0.03866214, 0.9837355 ,
       0.54317373, 0.7502544 , 0.27606624, 0.1158695 , 0.37159982,
       0.21192671], dtype=float32)), ('10', array([0.16444774, 0.7501594 , 0.49828517, 0.374829  , 0.7320385 ,
       0.35971633, 0.06303179, 0.8484459 , 0.11101878, 0.3502011 ,
       0.7994914 ], dtype=float32)), ('11', array([0.37048325, 0.84071827, 0.83286494, 0.7267204 , 0.6238394 ,
       0.55699384, 0.1783012 , 0.34238166, 0.41650406, 0.33483785,
       0.32886627], dtype=float32)), ('12', array([0.01353243, 0.5817296 , 0.31965086, 0.8035826 , 0.8051239 ,
       0.45243406, 0.82535845, 0.13737199, 0.9305921 , 0.06916748,
       0.14225414], dtype=float32)), ('13', array([0.86064786, 0.54453886, 0.24268243, 0.53908193, 0.872055  ,
       0.7478376 , 0.42226467, 0.72198015, 0.95938796, 0.29598278,
       0.87353754], dtype=float32)), ('14', array([0.04739381, 0.75630265, 0.33287704, 0.138322  , 0.50587213,
       0.74883515, 0.57262176, 0.82825434, 0.3875679 , 0.13219483,
       0.9450637 ], dtype=float32)), ('15', array([0.00826951, 0.05851259, 0.6561995 , 0.7385792 , 0.85713834,
       0.92673075, 0.8235313 , 0.32921112, 0.8947141 , 0.6636146 ,
       0.8919714 ], dtype=float32)), ('2', array([0.63130146, 0.04996976, 0.98058486, 0.15754423, 0.47642145,
       0.09624381, 0.48824155, 0.7720303 , 0.65553695, 0.8204826 ,
       0.5275531 ], dtype=float32)), ('3', array([0.6703806 , 0.9697325 , 0.9847291 , 0.54703957, 0.9398831 ,
       0.27219427, 0.5481388 , 0.23533353, 0.33209285, 0.40993708,
       0.5643652 ], dtype=float32)), ('4', array([0.01119027, 0.3509531 , 0.70537275, 0.22913927, 0.6159203 ,
       0.56540316, 0.59363735, 0.74443275, 0.83226067, 0.9468231 ,
       0.8185355 ], dtype=float32)), ('5', array([0.84316516, 0.3559143 , 0.31177044, 0.52407366, 0.46709052,
       0.9328048 , 0.39179146, 0.3622506 , 0.24097352, 0.602627  ,
       0.23160641], dtype=float32)), ('6', array([0.24303944, 0.13899802, 0.5461968 , 0.8253502 , 0.49968332,
       0.68108237, 0.3313101 , 0.04826986, 0.9280715 , 0.09820011,
       0.26902416], dtype=float32)), ('7', array([0.73053604, 0.8798988 , 0.91266835, 0.57133013, 0.10633966,
       0.08646412, 0.7777162 , 0.9946282 , 0.49133363, 0.3967138 ,
       0.41829684], dtype=float32)), ('8', array([0.7544817 , 0.29184872, 0.3078897 , 0.7096112 , 0.85396624,
       0.50468457, 0.85435975, 0.32295007, 0.6048729 , 0.3334717 ,
       0.80915976], dtype=float32)), ('9', array([0.24739833, 0.98737615, 0.58174175, 0.7802174 , 0.28129053,
       0.7962593 , 0.5785189 , 0.20534958, 0.47940564, 0.5425097 ,
       0.80050904], dtype=float32))])" is a sequence, while substructure "type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]" is not

During handling of the above exception, another exception occurred:

[36mray::RolloutWorker.apply()[39m (pid=78898, ip=140.118.201.156, actor_id=2ee426c029579416157b9ba801000000, repr=<ray.rllib.evaluation.rollout_worker.RolloutWorker object at 0x7f514685ced0>)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/utils/actor_manager.py", line 189, in apply
    raise e
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/utils/actor_manager.py", line 178, in apply
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/execution/rollout_ops.py", line 84, in <lambda>
    lambda w: w.sample(), local_worker=False, healthy_only=True
              ^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/rollout_worker.py", line 694, in sample
    batches = [self.input_reader.next()]
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/sampler.py", line 91, in next
    batches = [self.get_data()]
               ^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/sampler.py", line 276, in get_data
    item = next(self._env_runner)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/env_runner_v2.py", line 344, in run
    outputs = self.step()
              ^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/env_runner_v2.py", line 370, in step
    active_envs, to_eval, outputs = self._process_observations(
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/evaluation/env_runner_v2.py", line 637, in _process_observations
    processed = policy.agent_connectors(acd_list)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/agent/pipeline.py", line 41, in __call__
    ret = c(ret)
          ^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/connector.py", line 265, in __call__
    return [self.transform(d) for d in acd_list]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/connector.py", line 265, in <listcomp>
    return [self.transform(d) for d in acd_list]
            ^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/connectors/agent/obs_preproc.py", line 58, in transform
    d[SampleBatch.NEXT_OBS] = self._preprocessor.transform(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/models/preprocessors.py", line 329, in transform
    self.check_shape(observation)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/models/preprocessors.py", line 69, in check_shape
    observation = convert_element_to_space_type(
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/ray/rllib/utils/spaces/space_utils.py", line 472, in convert_element_to_space_type
    return tree.map_structure(map_, element, sampled_element, check_types=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/tree/__init__.py", line 433, in map_structure
    assert_same_structure(structures[0], other, check_types=check_types)
  File "/home/citiai-cygnus/anaconda3/lib/python3.11/site-packages/tree/__init__.py", line 288, in assert_same_structure
    raise type(e)("%s\n"
ValueError: The two structures don't have the same nested structure.

First structure: type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

Second structure: type=OrderedDict str=OrderedDict([('0', array([0.7284179 , 0.3982534 , 0.25675693, 0.67286175, 0.12987772,
       0.5383716 , 0.79890805, 0.95478386, 0.8700762 , 0.9634496 ,
       0.40837577], dtype=float32)), ('1', array([0.9931105 , 0.72563416, 0.35256886, 0.03866214, 0.9837355 ,
       0.54317373, 0.7502544 , 0.27606624, 0.1158695 , 0.37159982,
       0.21192671], dtype=float32)), ('10', array([0.16444774, 0.7501594 , 0.49828517, 0.374829  , 0.7320385 ,
       0.35971633, 0.06303179, 0.8484459 , 0.11101878, 0.3502011 ,
       0.7994914 ], dtype=float32)), ('11', array([0.37048325, 0.84071827, 0.83286494, 0.7267204 , 0.6238394 ,
       0.55699384, 0.1783012 , 0.34238166, 0.41650406, 0.33483785,
       0.32886627], dtype=float32)), ('12', array([0.01353243, 0.5817296 , 0.31965086, 0.8035826 , 0.8051239 ,
       0.45243406, 0.82535845, 0.13737199, 0.9305921 , 0.06916748,
       0.14225414], dtype=float32)), ('13', array([0.86064786, 0.54453886, 0.24268243, 0.53908193, 0.872055  ,
       0.7478376 , 0.42226467, 0.72198015, 0.95938796, 0.29598278,
       0.87353754], dtype=float32)), ('14', array([0.04739381, 0.75630265, 0.33287704, 0.138322  , 0.50587213,
       0.74883515, 0.57262176, 0.82825434, 0.3875679 , 0.13219483,
       0.9450637 ], dtype=float32)), ('15', array([0.00826951, 0.05851259, 0.6561995 , 0.7385792 , 0.85713834,
       0.92673075, 0.8235313 , 0.32921112, 0.8947141 , 0.6636146 ,
       0.8919714 ], dtype=float32)), ('2', array([0.63130146, 0.04996976, 0.98058486, 0.15754423, 0.47642145,
       0.09624381, 0.48824155, 0.7720303 , 0.65553695, 0.8204826 ,
       0.5275531 ], dtype=float32)), ('3', array([0.6703806 , 0.9697325 , 0.9847291 , 0.54703957, 0.9398831 ,
       0.27219427, 0.5481388 , 0.23533353, 0.33209285, 0.40993708,
       0.5643652 ], dtype=float32)), ('4', array([0.01119027, 0.3509531 , 0.70537275, 0.22913927, 0.6159203 ,
       0.56540316, 0.59363735, 0.74443275, 0.83226067, 0.9468231 ,
       0.8185355 ], dtype=float32)), ('5', array([0.84316516, 0.3559143 , 0.31177044, 0.52407366, 0.46709052,
       0.9328048 , 0.39179146, 0.3622506 , 0.24097352, 0.602627  ,
       0.23160641], dtype=float32)), ('6', array([0.24303944, 0.13899802, 0.5461968 , 0.8253502 , 0.49968332,
       0.68108237, 0.3313101 , 0.04826986, 0.9280715 , 0.09820011,
       0.26902416], dtype=float32)), ('7', array([0.73053604, 0.8798988 , 0.91266835, 0.57133013, 0.10633966,
       0.08646412, 0.7777162 , 0.9946282 , 0.49133363, 0.3967138 ,
       0.41829684], dtype=float32)), ('8', array([0.7544817 , 0.29184872, 0.3078897 , 0.7096112 , 0.85396624,
       0.50468457, 0.85435975, 0.32295007, 0.6048729 , 0.3334717 ,
       0.80915976], dtype=float32)), ('9', array([0.24739833, 0.98737615, 0.58174175, 0.7802174 , 0.28129053,
       0.7962593 , 0.5785189 , 0.20534958, 0.47940564, 0.5425097 ,
       0.80050904], dtype=float32))])

More specifically: Substructure "type=OrderedDict str=OrderedDict([('0', array([0.7284179 , 0.3982534 , 0.25675693, 0.67286175, 0.12987772,
       0.5383716 , 0.79890805, 0.95478386, 0.8700762 , 0.9634496 ,
       0.40837577], dtype=float32)), ('1', array([0.9931105 , 0.72563416, 0.35256886, 0.03866214, 0.9837355 ,
       0.54317373, 0.7502544 , 0.27606624, 0.1158695 , 0.37159982,
       0.21192671], dtype=float32)), ('10', array([0.16444774, 0.7501594 , 0.49828517, 0.374829  , 0.7320385 ,
       0.35971633, 0.06303179, 0.8484459 , 0.11101878, 0.3502011 ,
       0.7994914 ], dtype=float32)), ('11', array([0.37048325, 0.84071827, 0.83286494, 0.7267204 , 0.6238394 ,
       0.55699384, 0.1783012 , 0.34238166, 0.41650406, 0.33483785,
       0.32886627], dtype=float32)), ('12', array([0.01353243, 0.5817296 , 0.31965086, 0.8035826 , 0.8051239 ,
       0.45243406, 0.82535845, 0.13737199, 0.9305921 , 0.06916748,
       0.14225414], dtype=float32)), ('13', array([0.86064786, 0.54453886, 0.24268243, 0.53908193, 0.872055  ,
       0.7478376 , 0.42226467, 0.72198015, 0.95938796, 0.29598278,
       0.87353754], dtype=float32)), ('14', array([0.04739381, 0.75630265, 0.33287704, 0.138322  , 0.50587213,
       0.74883515, 0.57262176, 0.82825434, 0.3875679 , 0.13219483,
       0.9450637 ], dtype=float32)), ('15', array([0.00826951, 0.05851259, 0.6561995 , 0.7385792 , 0.85713834,
       0.92673075, 0.8235313 , 0.32921112, 0.8947141 , 0.6636146 ,
       0.8919714 ], dtype=float32)), ('2', array([0.63130146, 0.04996976, 0.98058486, 0.15754423, 0.47642145,
       0.09624381, 0.48824155, 0.7720303 , 0.65553695, 0.8204826 ,
       0.5275531 ], dtype=float32)), ('3', array([0.6703806 , 0.9697325 , 0.9847291 , 0.54703957, 0.9398831 ,
       0.27219427, 0.5481388 , 0.23533353, 0.33209285, 0.40993708,
       0.5643652 ], dtype=float32)), ('4', array([0.01119027, 0.3509531 , 0.70537275, 0.22913927, 0.6159203 ,
       0.56540316, 0.59363735, 0.74443275, 0.83226067, 0.9468231 ,
       0.8185355 ], dtype=float32)), ('5', array([0.84316516, 0.3559143 , 0.31177044, 0.52407366, 0.46709052,
       0.9328048 , 0.39179146, 0.3622506 , 0.24097352, 0.602627  ,
       0.23160641], dtype=float32)), ('6', array([0.24303944, 0.13899802, 0.5461968 , 0.8253502 , 0.49968332,
       0.68108237, 0.3313101 , 0.04826986, 0.9280715 , 0.09820011,
       0.26902416], dtype=float32)), ('7', array([0.73053604, 0.8798988 , 0.91266835, 0.57133013, 0.10633966,
       0.08646412, 0.7777162 , 0.9946282 , 0.49133363, 0.3967138 ,
       0.41829684], dtype=float32)), ('8', array([0.7544817 , 0.29184872, 0.3078897 , 0.7096112 , 0.85396624,
       0.50468457, 0.85435975, 0.32295007, 0.6048729 , 0.3334717 ,
       0.80915976], dtype=float32)), ('9', array([0.24739833, 0.98737615, 0.58174175, 0.7802174 , 0.28129053,
       0.7962593 , 0.5785189 , 0.20534958, 0.47940564, 0.5425097 ,
       0.80050904], dtype=float32))])" is a sequence, while substructure "type=ndarray str=[1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]" is not
Entire first structure:
.
Entire second structure:
OrderedDict([('0', .), ('1', .), ('10', .), ('11', .), ('12', .), ('13', .), ('14', .), ('15', .), ('2', .), ('3', .), ('4', .), ('5', .), ('6', .), ('7', .), ('8', .), ('9', .)])
